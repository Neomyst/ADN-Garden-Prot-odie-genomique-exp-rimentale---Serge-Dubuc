// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Vex.Flow.Player = (function() {
    var Fraction, INSTRUMENTS, L, RESOLUTION, drawDot, getOverlay, noteValues;

    Player.DEBUG = false;

    Player.INSTRUMENTS_LOADED = {};

    L = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (Vex.Flow.Player.DEBUG) {
        return typeof console !== "undefined" && console !== null ? console.log.apply(console, ["(Vex.Flow.Player)"].concat(__slice.call(args))) : void 0;
      }
    };

    Fraction = Vex.Flow.Fraction;

    RESOLUTION = Vex.Flow.RESOLUTION;

    noteValues = Vex.Flow.Music.noteValues;

    drawDot = Vex.drawDot;

    INSTRUMENTS = {
      "accordion": 21,
      "acoustic_bass": 32,
      "acoustic_grand_piano": 0,
      "acoustic_guitar_nylon": 24,
      "acoustic_guitar_steel": 25,
      "agogo": 113,
      "alto_sax": 65,
      "applause": 126,
      "bagpipe": 109,
      "banjo": 105,
      "baritone_sax": 67,
      "bassoon": 70,
      "bird_tweet": 123,
      "blown_bottle": 76,
      "brass_section": 61,
      "breath_noise": 121,
      "bright_acoustic_piano": 1,
      "celesta": 8,
      "cello": 42,
      "choir_aahs": 52,
      "church_organ": 19,
      "clarinet": 71,
      "clavinet": 7,
      "contrabass": 43,
      "distortion_guitar": 30,
      "drawbar_organ": 16,
      "dulcimer": 15,
      "electric_bass_finger": 33,
      "electric_bass_pick": 34,
      "electric_grand_piano": 2,
      "electric_guitar_clean": 27,
      "electric_guitar_jazz": 26,
      "electric_guitar_muted": 28,
      "electric_piano_1": 4,
      "electric_piano_2": 5,
      "english_horn": 69,
      "fiddle": 110,
      "flute": 73,
      "french_horn": 60,
      "fretless_bass": 35,
      "fx_1_rain": 96,
      "fx_2_soundtrack": 97,
      "fx_3_crystal": 98,
      "fx_4_atmosphere": 99,
      "fx_5_brightness": 100,
      "fx_6_goblins": 101,
      "fx_7_echoes": 102,
      "fx_8_scifi": 103,
      "glockenspiel": 9,
      "guitar_fret_noise": 120,
      "guitar_harmonics": 31,
      "gunshot": 127,
      "harmonica": 22,
      "harpsichord": 6,
      "helicopter": 125,
      "honkytonk_piano": 3,
      "kalimba": 108,
      "koto": 107,
      "lead_1_square": 80,
      "lead_2_sawtooth": 81,
      "lead_3_calliope": 82,
      "lead_4_chiff": 83,
      "lead_5_charang": 84,
      "lead_6_voice": 85,
      "lead_7_fifths": 86,
      "lead_8_bass__lead": 87,
      "marimba": 12,
      "melodic_tom": 117,
      "music_box": 10,
      "muted_trumpet": 59,
      "oboe": 68,
      "ocarina": 79,
      "orchestra_hit": 55,
      "orchestral_harp": 46,
      "overdriven_guitar": 29,
      "pad_1_new_age": 88,
      "pad_2_warm": 89,
      "pad_3_polysynth": 90,
      "pad_4_choir": 91,
      "pad_5_bowed": 92,
      "pad_6_metallic": 93,
      "pad_7_halo": 94,
      "pad_8_sweep": 95,
      "pan_flute": 75,
      "percussive_organ": 17,
      "piccolo": 72,
      "pizzicato_strings": 45,
      "recorder": 74,
      "reed_organ": 20,
      "reverse_cymbal": 119,
      "rock_organ": 18,
      "seashore": 122,
      "shakuhachi": 77,
      "shamisen": 106,
      "shanai": 111,
      "sitar": 104,
      "slap_bass_1": 36,
      "slap_bass_2": 37,
      "soprano_sax": 64,
      "steel_drums": 114,
      "string_ensemble_1": 48,
      "string_ensemble_2": 49,
      "synth_bass_1": 38,
      "synth_bass_2": 39,
      "synth_brass_1": 62,
      "synth_brass_2": 63,
      "synth_choir": 54,
      "synth_drum": 118,
      "synth_strings_1": 50,
      "synth_strings_2": 51,
      "taiko_drum": 116,
      "tango_accordion": 23,
      "telephone_ring": 124,
      "tenor_sax": 66,
      "timpani": 47,
      "tinkle_bell": 112,
      "tremolo_strings": 44,
      "trombone": 57,
      "trumpet": 56,
      "tuba": 58,
      "tubular_bells": 14,
      "vibraphone": 11,
      "viola": 41,
      "violin": 40,
      "voice_oohs": 53,
      "whistle": 78,
      "woodblock": 115,
      "xylophone": 13
    } 

    function Player(artist, options) {
      this.artist = artist;
      L("Initializing player: ", options);
      this.options = {
        instrument: "acoustic_grand_piano",
        tempo: 120,
        show_controls: true,
        soundfont_url: "/soundfont/",
        overlay_class: "vextab-player"
      };
      if (options != null) {
        _.extend(this.options, options);
      }
      L("Using soundfonts in: " + this.options.soundfont_url);
      this.interval_id = null;
      this.paper = null;
      this.reset();
    }

    Player.prototype.setArtist = function(artist) {
      this.artist = artist;
      return this.reset();
    };

    Player.prototype.setTempo = function(tempo) {
      L("New tempo: ", tempo);
      this.options.tempo = tempo;
      return this.reset();
    };

    Player.prototype.setInstrument = function(instrument) {
      L("New instrument: ", instrument);
      if (__indexOf.call(_.keys(INSTRUMENTS), instrument) < 0) {
        throw new Vex.RERR("PlayerError", "Invalid instrument: " + instrument);
      }
      this.options.instrument = instrument;
      return this.reset();
    };

    Player.prototype.reset = function() {
      this.artist.attachPlayer(this);
      this.tick_notes = {};
      this.all_ticks = [];
      this.tpm = this.options.tempo * (RESOLUTION / 4);
      this.refresh_rate = 25;
      this.ticks_per_refresh = this.tpm / (60 * (1000 / this.refresh_rate));
      this.total_ticks = 0;
      if (this.marker != null) {
        this.marker.remove();
        this.marker = null;
      }
      return this.stop();
    };

    getOverlay = function(context, scale, overlay_class) {
      var canvas, ctx, height, overlay, ps, width;
      canvas = context.canvas;
      height = canvas.height;
      width = canvas.width;
      overlay = $('<canvas>');
      overlay.css("position", "absolute");
      overlay.css("left", 0);
      overlay.css("top", 0);
      overlay.addClass(overlay_class);
      $(canvas).after(overlay);
      ctx = Vex.Flow.Renderer.getCanvasContext(overlay.get(0), width, height);
      ctx.scale(scale, scale);
      ps = new paper.PaperScope();
      ps.setup(overlay.get(0));
      return {
        paper: ps,
        canvas: overlay.get(0)
      };
    };

    Player.prototype.removeControls = function() {
      if (this.play_button != null) {
        this.play_button.remove();
      }
      if (this.stop_button != null) {
        this.stop_button.remove();
      }
      if (this.paper != null) {
        return this.paper.view.draw();
      }
    };

    Player.prototype.render = function() {
      var abs_tick, data, i, key, max_voice_tick, note, overlay, staves, total_ticks, total_voice_ticks, voice, voice_group, _i, _j, _k, _len, _len1, _len2, _ref,
        _this = this;
      this.reset();
      data = this.artist.getPlayerData();
      this.scale = data.scale;
      if (!this.paper) {
        overlay = getOverlay(data.context, data.scale, this.options.overlay_class);
        this.paper = overlay.paper;
      }
      this.marker = new this.paper.Path.Rectangle(0, 0, 13, 85);
      this.loading_message = new this.paper.PointText(35, 12);
      if (this.options.show_controls) {
        this.play_button = new this.paper.Path.RegularPolygon(new this.paper.Point(25, 10), 3, 7, 7);
        this.play_button.fillColor = '#396';
        this.play_button.opacity = 0.8;
        this.play_button.rotate(90);
        this.play_button.onMouseUp = function(event) {
          return _this.play();
        };
        this.stop_button = new this.paper.Path.Rectangle(3, 3, 10, 10);
        this.stop_button.fillColor = '#396';
        this.stop_button.opacity = 0.8;
        this.stop_button.onMouseUp = function(event) {
          return _this.stop();
        };
      }
      this.paper.view.draw();
      staves = data.voices;
      total_ticks = new Fraction(0, 1);
      for (_i = 0, _len = staves.length; _i < _len; _i++) {
        voice_group = staves[_i];
        max_voice_tick = new Fraction(0, 1);
        for (i = _j = 0, _len1 = voice_group.length; _j < _len1; i = ++_j) {
          voice = voice_group[i];
          total_voice_ticks = new Fraction(0, 1);
          _ref = voice.getTickables();
          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
            note = _ref[_k];
            if (!note.shouldIgnoreTicks()) {
              abs_tick = total_ticks.clone();
              abs_tick.add(total_voice_ticks);
              abs_tick.simplify();
              key = abs_tick.toString();
              if (_.has(this.tick_notes, key)) {
                this.tick_notes[key].notes.push(note);
              } else {
                this.tick_notes[key] = {
                  tick: abs_tick,
                  value: abs_tick.value(),
                  notes: [note]
                };
              }
              total_voice_ticks.add(note.getTicks());
            }
          }
          if (total_voice_ticks.value() > max_voice_tick.value()) {
            max_voice_tick.copy(total_voice_ticks);
          }
        }
        total_ticks.add(max_voice_tick);
      }
      this.all_ticks = _.sortBy(_.values(this.tick_notes), function(tick) {
        return tick.value;
      });
      this.total_ticks = _.last(this.all_ticks);
      return L(this.all_ticks);
    };

    Player.prototype.updateMarker = function(x, y) {
      this.marker.fillColor = '#369';
      this.marker.opacity = 0.2;
      this.marker.setPosition(new this.paper.Point(x * this.scale, y * this.scale));
      return this.paper.view.draw();
    };

    Player.prototype.playNote = function(notes) {
      var duration, key, keys, midi_note, note, note_value, octave, x, y, _i, _len, _results;
      L("(" + this.current_ticks + ") playNote: ", notes);
      _results = [];
      for (_i = 0, _len = notes.length; _i < _len; _i++) {
        note = notes[_i];
        x = note.getAbsoluteX() + 4;
        y = note.getStave().getYForLine(2);
        if (this.paper != null) {
          this.updateMarker(x, y);
        }
        if (note.isRest()) {
          continue;
        }
        keys = note.getPlayNote();
        duration = note.getTicks().value() / (this.tpm / 60);
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _results1 = [];
          for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
            key = keys[_j];
            _ref = key.split("/"), note = _ref[0], octave = _ref[1];
            note = note.trim().toLowerCase();
            note_value = noteValues[note];
            if (note_value == null) {
              continue;
            }
            //console.log(octave, note, noteValues[note], midi_note);
            midi_note = (24 + (octave * 12)) + noteValues[note].int_val;
            //console.log(octave, note, noteValues[note], midi_note);
            MIDI.noteOn(0, midi_note, 127, 0);
            _results1.push(MIDI.noteOff(0, midi_note, duration));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Player.prototype.refresh = function() {
      if (this.done) {
        this.stop();
        return;
      }
      this.current_ticks += this.ticks_per_refresh;
      if (this.current_ticks >= this.next_event_tick) {
        this.playNote(this.all_ticks[this.next_index].notes);
        this.next_index++;
        if (this.next_index >= this.all_ticks.length) {
          return this.done = true;
        } else {
          return this.next_event_tick = this.all_ticks[this.next_index].tick.value();
        }
      }
    };

    Player.prototype.stop = function() {
      L("Stop");
      if (this.interval_id != null) {
        window.clearInterval(this.interval_id);
      }
      if (this.play_button != null) {
        this.play_button.fillColor = '#396';
      }
      if (this.paper != null) {
        this.paper.view.draw();
      }
      this.interval_id = null;
      this.current_ticks = 0;
      this.next_event_tick = 0;
      this.next_index = 0;
      return this.done = false;
    };

    Player.prototype.start = function() {
      var _this = this;
      this.stop();
      L("Start");
      if (this.play_button != null) {
        this.play_button.fillColor = '#a36';
      }
      MIDI.programChange(0, INSTRUMENTS[this.options.instrument]);
      return this.interval_id = window.setInterval((function() {
        return _this.refresh();
      }), this.refresh_rate);
    };

    Player.prototype.play = function() {
      var _this = this;
      L("Play: ", this.refresh_rate, this.ticks_per_refresh);
      if (Vex.Flow.Player.INSTRUMENTS_LOADED[this.options.instrument] && !this.loading) {
        return this.start();
      } else {
        L("Loading instruments...");
        this.loading_message.content = "Loading instruments...";
        this.loading_message.fillColor = "green";
        this.loading = true;
        this.paper.view.draw();
        return MIDI.loadPlugin({
          soundfontUrl: this.options.soundfont_url,
          instruments: [this.options.instrument],
          callback: function() {
            Vex.Flow.Player.INSTRUMENTS_LOADED[_this.options.instrument] = true;
            _this.loading = false;
            _this.loading_message.content = "";
            return _this.start();
          }
        });
      }
    };

    return Player;

  })();

}).call(this);
